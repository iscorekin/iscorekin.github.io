{"version":3,"sources":["styles.js","constants/colors.js","components/Index/styles.js","components/Index/index.js","constants/sizes.js","helpers/mixins.js","layouts/Resizer/index.js","layouts/Index/index.js","App.jsx","serviceWorker.js","index.js"],"names":["Wrapper","styled","div","_templateObject","colors","Title","styles_templateObject","Blocks","_templateObject2","Block","_templateObject3","Subtitle","_templateObject4","Name","_templateObject5","_templateObject6","Index","props","react_default","a","createElement","styles_Wrapper","SIZES","desktop","laptop","tablet","phone","Object","values","sizer","media","keys","reduce","accumulator","label","css","mixins_templateObject","apply","arguments","bigger","concat","index","indexOf","nextDevice","Resizer","Resizer_templateObject","Resizer_templateObject2","Resizer_templateObject3","IndexLayout","layouts_Resizer","components_Index","App","layouts_Index","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"wRAEO,IAAMA,EAAUC,IAAOC,IAAVC,KCFLC,EACJ,UADIA,EAEN,gpCCCF,IAAMC,EAAQJ,IAAOC,IAAVI,IAGPF,GAGEG,EAASN,IAAOC,IAAVM,KAQNC,EAAQR,IAAOC,IAAVQ,KAILC,EAAWV,IAAOC,IAAVU,IAEVR,GAKES,EAAOZ,IAAOC,IAAVY,IAKNV,GAIEJ,EAAUC,IAAOC,IAAVa,IAKkBX,EAAmBA,EAKjBA,EAAiBA,EAEnDC,EACSD,EAGTO,EACSP,EAGTS,EACST,GCxCAY,EAfD,SAAAC,GAAK,OACjBC,EAAAC,EAAAC,cAACC,EAAD,KACEH,EAAAC,EAAAC,cAACf,EAAD,eACAa,EAAAC,EAAAC,cAACb,EAAD,KACEW,EAAAC,EAAAC,cAACX,EAAD,KACES,EAAAC,EAAAC,cAACT,EAAD,yBACAO,EAAAC,EAAAC,cAACP,EAAD,gBAEFK,EAAAC,EAAAC,cAACX,EAAD,KACES,EAAAC,EAAAC,cAACT,EAAD,wBACAO,EAAAC,EAAAC,cAACP,EAAD,qBCbKS,EAAQ,CACnBC,QAAS,KACTC,OAAQ,KACRC,OAAQ,IACRC,MAAO,KAGMJ,IAEYK,OAAOC,OAAON,0HCNzC,IAAMO,EAAQ,SAAAC,GAAK,OACjBH,OAAOI,KAAKT,GAAOU,OAAO,SAACC,EAAaC,GAMtC,OALAD,EAAYC,GAAS,kBAAaC,YAAZC,IACVN,EAAMG,EAAaC,GACzBC,IAAGE,WAAH,EAAAC,aAGCL,GACN,KAcQM,GARUV,EACrB,SAACI,EAAaC,GAAd,oBAAAM,OAAsClB,EAAMY,GAAS,EAArD,QAOoBL,EACpB,SAACI,EAAaC,GAAd,oBAAAM,OAAsClB,EAAMY,GAA5C,SAOkBL,EAAM,SAACI,EAAaC,GACtC,IAAMH,EAAOJ,OAAOI,KAAKE,GACnBQ,EAAQV,EAAKW,QAAQR,GACrBS,EAAarB,EAAMS,EAAKU,EAAQ,KAAO,EAC7C,oBAAAD,OAAqBG,EAAa,EAAlC,sBAAAH,OAAwDlB,EAAMY,GAA9D,wbClCK,IAkBQU,EAlBQ3C,IAAOC,IAAV2C,IAMhBN,EAAOd,OANSqB,KAWhBP,EAAOhB,QAXSwB,MCMLC,EALK,SAAA/B,GAAK,OACzBC,EAAAC,EAAAC,cAAC6B,EAAD,KACE/B,EAAAC,EAAAC,cAAC8B,EAAUjC,KCIEkC,EANH,kBACVjC,EAAAC,EAAAC,cAACpB,EAAD,KACEkB,EAAAC,EAAAC,cAACgC,EAAD,QCMgBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzC,EAAAC,EAAAC,cAACwC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.808f86d8.chunk.js","sourcesContent":["import styled from 'styled-components';\n\nexport const Wrapper = styled.div``;","export default {\n  primary: '#cc66ff',\n  white: '#ffffff',\n  dark: '#660066'\n}","import styled from 'styled-components';\nimport colors from '../../constants/colors';\n\nexport const Title = styled.div`\n  font-size: 64px;\n  font-weight: bold;\n  color: ${colors.white};\n`;\n\nexport const Blocks = styled.div`\n  width: 60%;\n  display: flex;\n  justify-content: space-around;\n  margin-bottom: 64px;\n  flex-wrap: wrap;\n`;\n\nexport const Block = styled.div`\n\n`;\n\nexport const Subtitle = styled.div`\n  font-size: 32px;\n  color: ${colors.white};\n  text-align: center;\n  margin-top: 32px;\n`;\n\nexport const Name = styled.div`\n  font-size: 64px;\n  text-align: center;\n  font-weight: bold;\n  text-transform: uppercase;\n  color: ${colors.white};\n`;\n\n\nexport const Wrapper = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  justify-content: center;\n  background-image: linear-gradient(${colors.primary}, ${colors.white});\n  padding-top: 64px;\n  transition: 1s;\n\n  &:hover {\n    background-image: linear-gradient(${colors.white}, ${colors.primary});\n\n    ${Title} {\n      color: ${colors.primary};\n    }\n\n    ${Subtitle} {\n      color: ${colors.primary};\n    }\n\n    ${Name} {\n      color: ${colors.primary};\n    }\n  }\n`;\n","import React from 'react';\nimport * as UI from './styles';\n\nconst Index = props => \n  <UI.Wrapper>\n    <UI.Title>Hello!</UI.Title>\n    <UI.Blocks>\n      <UI.Block>\n        <UI.Subtitle>My first name is</UI.Subtitle>\n        <UI.Name>Nikita</UI.Name>  \n      </UI.Block>\n      <UI.Block>\n        <UI.Subtitle>My last name is</UI.Subtitle>\n        <UI.Name>Iskorkin</UI.Name>  \n      </UI.Block>\n    </UI.Blocks>\n  </UI.Wrapper>\n\nexport default Index;","export const SIZES = {\n  desktop: 1280,\n  laptop: 1024,\n  tablet: 720,\n  phone: 320,\n};\n\nexport default SIZES;\n\nexport const SIZES_ARRAY = Object.values(SIZES);","import { css } from 'styled-components';\nimport SIZES from '../constants/sizes';\n\nconst sizer = media =>\n  Object.keys(SIZES).reduce((accumulator, label) => {\n    accumulator[label] = (...args) => css`\n      @media (${media(accumulator, label)}) {\n        ${css(...args)}\n      }\n    `;\n    return accumulator;\n  }, {});\n\n/**\n * Миксин для smaller queries\n * @type {{}}\n */\nexport const smaller = sizer(\n  (accumulator, label) => `max-width: ${SIZES[label] - 1}px`,\n);\n\n/**\n * Миксин для bigger queries\n * @type {{}}\n */\nexport const bigger = sizer(\n  (accumulator, label) => `min-width: ${SIZES[label]}px`,\n);\n\n/**\n * Применяет правило только для конкретного размера экрана\n * @type {{}}\n */\nexport const only = sizer((accumulator, label) => {\n  const keys = Object.keys(accumulator);\n  const index = keys.indexOf(label);\n  const nextDevice = SIZES[keys[index + 1]] || 0;\n  return `min-width: ${nextDevice + 1}px and max-width: ${SIZES[label]}px`;\n});\n","import styled from 'styled-components';\nimport { bigger } from '../../helpers/mixins';\n\nexport const Resizer = styled.div`\n  width: 100%;\n  min-width: 320px;\n  padding-right: 24px;\n  padding-left: 24px;\n\n  ${bigger.tablet`\n    padding-right: 32px;\n    padding-left: 32px;\n  `}\n\n  ${bigger.desktop`\n    max-width: 1256px;\n    margin: 0 auto;\n    padding: 0;\n  `}\n`;\n\nexport default Resizer;","import React from 'react';\nimport Index from '../../components/Index';\nimport Resizer from '../Resizer';\n\nconst IndexLayout = props => \n<Resizer>\n  <Index {...props} />\n</Resizer>;\n\nexport default IndexLayout;\n","import React from 'react';\nimport * as UI from './styles';\nimport Index from './layouts/Index';\n\nconst App = () => (\n  <UI.Wrapper>\n    <Index />\n  </UI.Wrapper>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}